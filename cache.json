{
  "sources": [
    {
      "title": "Python Software Foundation News",
      "feedUrl": "http://pyfound.blogspot.com/atom.xml",
      "siteUrl": "http://pyfound.blogspot.com/",
      "articles": [
        {
          "id": "http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/XOSTXVDJBCY/update-on-python-software-foundation.html",
          "author": null,
          "description": "After ten years of exceptional service to the Python Software Foundation, the PSF Executive Director Ewa Jodlowska has decided to leave the Foundation at the end of 2021. We wish to thank Ewa for her many years of service and contributions to not only the Foundation but to the entire Python community. It‚Äôs safe to say the PSF, PyCon and the whole Python community would not be where it is today if not for Ewa.\nIn preparation for Ewa‚Äôs departure, the Python Software Foundation will begin a search to find a new Executive Director. The Executive Director is a key player in helping the Foundation pursue our mission ‚Äúto promote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers.‚Äù\nThe Board of Directors will work together with the Staff, the outgoing Executive Director, and the community in developing a timeline for the transition as well as posting periodic updates on the search when it formally begins. Please keep an eye on the PSF blog for these updates as well as the forthcoming job listing.",
          "link": "http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/XOSTXVDJBCY/update-on-python-software-foundation.html",
          "publishedOn": "2021-06-16T17:00:00.006Z",
          "wordCount": 872,
          "title": "Update on the Python Software Foundation Executive Director"
        },
        {
          "id": "http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/YhpQywGg83E/the-2021-python-language-summit.html",
          "author": null,
          "description": "The second day of the 2021 Python Language Summit finished with a series of lightning talks from Ronny Pfannschmidt, Pablo Galindo, Batuhan Taskaya, Luciano Ramalho, Jason R. Coombs, Mark Shannon, and Tobias Kohn.\n\n\n\nAnnotated Assertions: Debugging With Joy\nRonny Pfannschmidt spoke about annotated assertions. He is a pytest maintainer and loves approachable debugging.\nHe compared assertions in unittest with assertions in pytest. He remarked that mistakes have been made in the past and are still being made today. Before pytest 2.1, pytest would reinterpret assertions, which was bad for side effects. Today, pytest deals with side effects by handling all of the variables, collecting them, and showing them to you.¬†\nHere's what he would like to see in Python:\n\n\n\nHere's what he'd like to do:\n\nCr‚Ä¶",
          "link": "http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/YhpQywGg83E/the-2021-python-language-summit.html",
          "publishedOn": "2021-06-09T16:13:00.000Z",
          "wordCount": 1691,
          "title": "The 2021 Python Language Summit: Lightning Talks, Round 2"
        },
        {
          "id": "http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/4JkUDb_sHRc/the-2021-python-language-summit-fuzzing.html",
          "author": null,
          "description": "At the 2021 Python Language Summit, Zac Hatfield-Dodds gave a presentation about fuzzing and testing with Python properties. This presentation tied in with the one he gave at the 2020 Python Language Summit.\n\n\n\n¬†\n\nWhat Is Testing?\nFor the purposes of this talk, he defined testing as the art and science of running code and then checking if it did what it was supposed to do. He added that, although assertions, type checkers, linters, and code review are good, they are not testing.\nThere are two general reasons why we might have tests:\n\nFor correctness:\n\nThe goal is to validate software and determine that they are no bugs.\nNondeterminism is acceptable.\nFinding any fault is a success. \n\nFor software engineering (programming, over time, in teams):\n\nThe goal is to validate changes or detect regr‚Ä¶",
          "link": "http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/4JkUDb_sHRc/the-2021-python-language-summit-fuzzing.html",
          "publishedOn": "2021-06-06T16:37:00.002Z",
          "wordCount": 1532,
          "title": "The 2021 Python Language Summit: Fuzzing and Testing Python With Properties"
        },
        {
          "id": "http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/ntiuibWUuVc/the-2021-python-language-summit-what.html",
          "author": null,
          "description": "At the 2021 Python Language Summit, Eric Snow gave a presentation about how core developers can receive guidance to help them work on improvements to the language that will bring the most benefit to the Python community.\n\n\n\n\nWhat Does the Community Need? \nWhen Eric Snow first got involved in core development over a decade ago, he liked that there was so much to learn. But he found that the organization didn't offer a lot of direction in terms of guiding volunteers to the kind of work that would have the biggest impact.¬†\nOver the years, he's thought about how he and other contributors decide what to work on and why. What directs the efforts of contributors and core developers? Contributors make decisions based on their availability, expertise, and interests. Core developers need to act as s‚Ä¶",
          "link": "http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/ntiuibWUuVc/the-2021-python-language-summit-what.html",
          "publishedOn": "2021-06-05T20:38:00.001Z",
          "wordCount": 1190,
          "title": "The 2021 Python Language Summit: What Should I Work on as a Core Dev?"
        }
      ]
    },
    {
      "title": "The Django weblog",
      "feedUrl": "https://www.djangoproject.com/rss/weblog/",
      "siteUrl": "https://www.djangoproject.com/weblog/",
      "articles": [
        {
          "id": "https://www.djangoproject.com/weblog/2021/jul/01/security-releases/",
          "author": "Mariusz Felisiak",
          "description": "In accordance with our security release policy, the Django team\nis issuing\nDjango 3.2.5 and\nDjango 3.1.13.\nThese releases address the security issue with severity \"high\" detailed below. We encourage all users of Django to upgrade as soon as possible.\nCVE-2021-35042: Potential SQL injection via unsanitized QuerySet.order_by() input\nUnsanitized user input passed to QuerySet.order_by() could bypass intended\ncolumn reference validation in path marked for deprecation resulting in a\npotential SQL injection even if a deprecation warning is emitted.\nAs a mitigation the strict column reference validation was restored for the\nduration of the deprecation period. This regression appeared in 3.1 as a side\neffect of fixing #31426.\nThe issue is not present in the main branch as the deprecated path has been\nremoved.\nThanks to Joel Saunders for the report.\nAffected supported versions\nDjango 3.2\nDjango 3.1\nResolution\nPatches to resolve the issue have been applied to Django's 3.2 and 3.1\nrelease branches. The patches may be obtained from the\nfollowing changesets:\nOn the 3.2 release branch\nOn the 3.1 release branch\nThe following releases have been issued:\nDjango 3.2.5 (download Django 3.2.5 | 3.2.5 checksums)\nDjango 3.1.13 (download Django 3.1.13 | 3.1.13 checksums)\nThe PGP key ID used for this release is Mariusz Felisiak: 2EF56372BA48CD1B.\nGeneral notes regarding security reporting\nAs always, we ask that potential security issues be reported via\nprivate email to security@djangoproject.com, and not via Django's\nTrac instance or the django-developers list. Please see our security\npolicies for further\ninformation.",
          "link": "https://www.djangoproject.com/weblog/2021/jul/01/security-releases/",
          "publishedOn": "2021-07-01T06:42:04.000Z",
          "wordCount": 796,
          "title": "Django security releases issued: 3.2.5 and 3.1.13"
        }
      ]
    },
    {
      "title": "Ember.js Blog",
      "feedUrl": "https://blog.emberjs.com/rss.xml",
      "siteUrl": "https://blog.emberjs.com/rss.xml",
      "articles": [
        {
          "id": "https://blog.emberjs.com/the-ember-times-issue-183",
          "author": null,
          "description": "üëã Emberistas! üêπ\nNew release of Unstable Ember Language Server, share code snippets on Twitter using Ember, the difference between ember serve and npm run start, and an addon roundup!\nRelease of uELS v2.0.16 ‚úÖ\nUnstable Ember Language Server is a fully featured fork of Ember Language Server. While the name says unstable it actually has been stable and ready to use for day-to-day development!\nThanks to both Alex LaFroscia (@alexlafroscia) and Alex Kanunnikov (@lifeart) for new version release which provides:\nSupport workspace/didChangeConfiguration event\nImproved startup speed by delaying template tokenization\nAutocomplete now use global registry and file change events, not fs lookup, but we still do fs lookup on project initialization\nAdded template-lint severity support\nImproved template-‚Ä¶",
          "link": "https://blog.emberjs.com/the-ember-times-issue-183",
          "publishedOn": "2021-07-01T00:00:00.000Z",
          "wordCount": 748,
          "title": "The Ember Times - Issue No. 183"
        },
        {
          "id": "https://blog.emberjs.com/the-ember-times-issue-182",
          "author": null,
          "description": "üëã Emberistas! üêπ\nUsing the in-element helper, migrating Controllers to top-level Components, Ember Upgrade Sprints, Ember development on Twitch, and remodeling an Ember App Part 2.\nUsing the in-element helper ‚õ≥\nFaith Or (@faith-or) wrote a blog post on how they migrated from ember-wormhole to the built-in in-element helper introduced in Ember 3.20.\nEmber Wormhole is an addon that renders a child view somewhere else in the DOM outside of the component.\nThe in-element helper renders its block content outside of the regular flow, into a DOM element given by its destinationElement positional argument.\nCommon use cases for both include when a piece of UI is a logical child of a component but needs to render somewhere else such as a loading screen, a modal, tooltip or even a dropdown. The diffe‚Ä¶",
          "link": "https://blog.emberjs.com/the-ember-times-issue-182",
          "publishedOn": "2021-06-18T00:00:00.000Z",
          "wordCount": 1081,
          "title": "The Ember Times - Issue No. 182"
        }
      ]
    }
  ],
  "cliVersion": "1.11.0"
}