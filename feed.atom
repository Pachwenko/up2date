<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2021-05-25T00:50:40.023Z</id>
    <title>osmos::feed</title>
    <updated>2021-05-25T00:50:40.023Z</updated>
    <generator>osmosfeed 1.8.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[The 2021 Python Language Summit: The Python Documentation Work Group]]></title>
        <id>http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/F-Q2IZq3k0Q/the-2021-python-language-summit-python.html</id>
        <link href="http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/F-Q2IZq3k0Q/the-2021-python-language-summit-python.html"/>
        <updated>2021-05-24T04:29:00.000Z</updated>
        <summary type="html"><![CDATA[Mariatta Wijaya and Carol Willing gave a presentation about a new documentation work group at the 2021 Python Language Summit. Last year, Carol Willing and Ned Batchelder spoke about laying the groundwork for this project at the 2020 Python Language Summit.



 
Why Does Python Need a Documentation Work Group?
The mission of the Python Software Foundation is to advance the Python language and grow a diverse, international community of Python programmers so that the language can continue to flourish well into the future. However, when it comes to documentation, core developers don't necessarily reflect the larger world of Python users. If we can bring together core developers, documentarians, and educators, then we can have better documentation that serves the needs of the wider community m…]]></summary>
        <author>
            <name>Python Software Foundation News</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The 2021 Python Language Summit: The Challenges of Packaging Python for a Linux Distro]]></title>
        <id>http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/7TvPpM19_4Q/the-2021-python-language-summit_23.html</id>
        <link href="http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/7TvPpM19_4Q/the-2021-python-language-summit_23.html"/>
        <updated>2021-05-24T00:45:00.002Z</updated>
        <summary type="html"><![CDATA[Matthias Klose gave a talk about the challenges of packaging Python for a Linux distribution at the 2021 Python Language Summit. He wanted to discuss:

CPython sources and how they fit with Debian and Ubuntu
Ownership of module installations 
Architecture and platform support
Inclusiveness and the ubiquity of Python on various platforms
Communication issues
 
What Is Python Like on Debian and Ubuntu? 

He shared what Debian 11 and Ubuntu 21.04 have installed for Python. By default, there is almost nothing, so it's usually pulled in by various seeds or images. Linux distributions usually have a mature packaging system and don't ship naked CPython, unlike macOs or Windows.
These Debian and Ubuntu versions still use Python 2 to bootstrap, but one version of Python 3 is also shipped with them.…]]></summary>
        <author>
            <name>Python Software Foundation News</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The 2021 Python Language Summit: Lightning Talks, Round 1]]></title>
        <id>http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/fTXZvKxS0Zo/the-2021-python-language-summit_22.html</id>
        <link href="http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/fTXZvKxS0Zo/the-2021-python-language-summit_22.html"/>
        <updated>2021-05-23T02:43:00.000Z</updated>
        <summary type="html"><![CDATA[The first day of the 2021 Python Language Summit finished with a series of lightning talks from Petr Viktorin, Lorena Mesa, Scott Shawcroft, and Jeff Allen.


 
The Stable ABI and Limited C API
Petr Viktorin spoke about the stable ABI and limited C API. The stable ABI is a way to compile a C extension on Python 3.x and run it on Python 3.x+. It was introduced in 2009 with PEP 384. You can use it to simplify extension maintenance, and it will allow you to support more versions. But it does have lower performance, and you can't do everything with it that you could with the full API.
Petr Viktorin would like to see it used for bindings and embeddings. If Python is just a small part of your application and you don't want to invest a lot of maintainer time into supporting Python, then that woul…]]></summary>
        <author>
            <name>Python Software Foundation News</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The 2021 Python Language Summit: HPy — Present and Future]]></title>
        <id>http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/55OUWZdNrJE/the-2021-python-language-summit-hpy.html</id>
        <link href="http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/55OUWZdNrJE/the-2021-python-language-summit-hpy.html"/>
        <updated>2021-05-22T19:20:00.000Z</updated>
        <summary type="html"><![CDATA[At the 2021 Python Language Summit, Antonio Cuni gave a presentation about HPy. He also gave a presentation about HPy at the 2020 Python Language Summit, so this year he shared updates on how the project has evolved since then.

 
 
What Is HPy?
HPy is an alternative API for writing C extensions. Although the current Python C API shows CPython implementation details, HPy hides all the implementation details that would otherwise be exposed. Antonio Cuni said that, if everyone used HPy, then it would help Python evolve in the long term.
Using HPy extensions will make it easier to support alternative implementations. HPy is designed to be GC friendly and isn't build on top of ref counting. It is also designed to have zero overhead on CPython, so you can port an existing module from the Python…]]></summary>
        <author>
            <name>Python Software Foundation News</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The 2021 Python Language Summit: Making CPython Faster]]></title>
        <id>http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/Mb7GnQBu9NY/the-2021-python-language-summit-making.html</id>
        <link href="http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/Mb7GnQBu9NY/the-2021-python-language-summit-making.html"/>
        <updated>2021-05-21T00:42:00.001Z</updated>
        <summary type="html"><![CDATA[At the 2021 Python Language Summit, Guido van Rossum gave a presentation about plans for making CPython faster. This presentation came right after Dino Viehland's talk about Instagram's performance improvements to CPython and made multiple references to it.
 
 
Can We Make CPython Faster?
We can, but it's not yet clear by how much. Last October, Mark Shannon shared a plan on GitHub and python-dev. He asked for feedback and said that he could make CPython five times faster in four years, or fifty percent faster per year for four years in a row. He was looking for funding and wouldn't reveal the details of his plan without it.
How Will We Make CPython Faster? 

Seven months ago, Guido van Rossum left a brief retirement to work at Microsoft. He was given the freedom to pick a project and deci…]]></summary>
        <author>
            <name>Python Software Foundation News</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Ember Times - Issue No. 180]]></title>
        <id>https://blog.emberjs.com/the-ember-times-issue-180</id>
        <link href="https://blog.emberjs.com/the-ember-times-issue-180"/>
        <updated>2021-05-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[👋 Emberistas! 🐹
Ember's 10 year anniversary, Prettier for Handlebars support, Embroider in 3.5 weeks, GAAD pledge, quickstart to authentication, built with Ember: Fleetbase, and new and shiny add-ons ✨
Happy 10 year anniversary, Ember.js! 🎉
Many thanks to Natasha Fel and Andrey Fel (@andreyfel) for sharing their photos from Ember Nizhny Novgorod's Meetup, which featured a celebratory Nizhny Novgorod Tomster cake for Ember's big anniversary! Check out more photos from the meetup here.
Prettier for Handlebars support 🙌
Prettier can now officially format HTML templates with Handlebars (HBS) in the newly released version 2.3.0. Thank you to Cyrille David (@dcyriller) for pushing this initiative, which started in 2017, through the finish line.
Prettier is an opinionated code formatter. It e…]]></summary>
        <author>
            <name>Ember.js Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The 2021 Python Language Summit: CPython Performance Improvements at Instagram]]></title>
        <id>http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/4Tpn4LZPws4/the-2021-python-language-summit-cpython.html</id>
        <link href="http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/4Tpn4LZPws4/the-2021-python-language-summit-cpython.html"/>
        <updated>2021-05-20T04:02:00.001Z</updated>
        <summary type="html"><![CDATA[Dino Viehland gave a presentation at the 2021 Python Language Summit about improvements to CPython's performance at Instagram. 

Cinder is Instagram's internal performance-oriented production version of
CPython 3.8, so all of the comparisons in this presentation dealt with Python 3.8. Cinder has a lot of performance optimizations, including
bytecode inline caching, eager evaluation of coroutines, a method-at-a-time
JIT, and an experimental bytecode compiler that uses type annotations to emit
type-specialized bytecode that performs better in the JIT.
Successful Improvements
Instagram did a lot of work with asynchronous I/O. One big change was sending and receiving values without raising StopIteration. Raising all of those exceptions was a huge source of overhead. On simple benchmarks, t…]]></summary>
        <author>
            <name>Python Software Foundation News</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Ember JS Framework Takes the GAAD Pledge]]></title>
        <id>https://blog.emberjs.com/gaad-2021</id>
        <link href="https://blog.emberjs.com/gaad-2021"/>
        <updated>2021-05-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[As we join Global Accessibility Awareness Day (GAAD) in celebrating its tenth anniversary, we are delighted to announce that the Ember JavaScript Framework has taken the GAAD pledge to make accessibility a core value of our framework.
For those who know the project well, this will come as no surprise. It’s no secret that we think that accessibility is an integral part of quality code. Ember.js is committed to providing a well-lit path for developer success, and our plans to make it easier for developers to write accessible code are part of that. In 2020, the Ember Accessibility Strike Team became the Ember Accessibility Working Group, demonstrating our commitment to long-term accessibility growth in the framework.
What We've Done So Far
Ember has also been shipping improvements with the “a…]]></summary>
        <author>
            <name>Ember.js Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The 2021 Python Language Summit: Progress on Running Multiple Python Interpreters in Parallel in the Same Process]]></title>
        <id>http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/JSbNFZCoINo/the-2021-python-language-summit_16.html</id>
        <link href="http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/JSbNFZCoINo/the-2021-python-language-summit_16.html"/>
        <updated>2021-05-17T03:53:00.002Z</updated>
        <summary type="html"><![CDATA[Victor Stinner and Dong-hee Na gave a presentation at the 2021 Python Language Summit about running multiple Python interpreters in parallel in the same process.




Use Cases 

Victor Stinner started by explaining why we would need to make the changes that they're discussing. One use case would be if you wanted to embed Python and extend the features of your application, like Vim, Blender, LibreOffice, and pybind11. Another use case is subinterpreters. For example, to handle HTTP requests, there is Apache mod_wsgi, which uses subinterpreters. There are also plugins for WeeChat, which is an IRC client written in C.

Embedding Python
One of the current issues with embedding Python is that it doesn't explicitly release memory at exit. If you use a tool to track memory leaks, such as Valgrind…]]></summary>
        <author>
            <name>Python Software Foundation News</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The 2021 Python Language Summit: PEP 654 — Exception Groups and except*]]></title>
        <id>http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/YfwxVhCg4nM/the-2021-python-language-summit-pep-654.html</id>
        <link href="http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/YfwxVhCg4nM/the-2021-python-language-summit-pep-654.html"/>
        <updated>2021-05-16T03:14:00.002Z</updated>
        <summary type="html"><![CDATA[PEP 654 was authored by Irit Katriel, Yury Selivanov, and Guido van Rossum. This PEP is currently at the draft stage. At the 2021 Python Language Summit, the authors shared what it is, why we need it, and which ideas they rejected.


 What Is PEP 654?


The purpose of this PEP is to help Python users handle unrelated exceptions. Right now, if you're dealing with several unrelated exceptions, you can:


Raise one exception and throw away the others, in which case you're losing exceptions

Return a list of exceptions instead of raising them, in which case they become error codes rather than exceptions, so you can't handle them with exception-handling mechanisms
Wrap the list of exceptions in a wrapper exception and use it as a list of error codes, which still can't be handled with exception-…]]></summary>
        <author>
            <name>Python Software Foundation News</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django 4.x Technical Board Election Results]]></title>
        <id>https://www.djangoproject.com/weblog/2021/may/14/django-4x-technical-board-election-results/</id>
        <link href="https://www.djangoproject.com/weblog/2021/may/14/django-4x-technical-board-election-results/"/>
        <updated>2021-05-14T13:19:49.000Z</updated>
        <summary type="html"><![CDATA[The Technical Board for the Django 4.x release cycle will be



Andrew Godwin

Florian Apolloner

Simon Charette

Adam Johnson

Thomas Forbes



Congratulations to the new board and a special thank you to departing Technical Board members James Bennett and Markus Holtermann.


Thank you to everyone who participated in the nominations and voting.


Voting breakdown:


49 Eligible voters opted-in to voting

46 Eligible voters cast votes

 

Condorcet pairwise evaluation results


Andrew Godwin  (Condorcet winner: wins contests with all other choices)

Florian Apolloner  loses to Andrew Godwin by 25–8

 Simon Charette  loses to Andrew Godwin by 28–7, loses to Florian Apolloner by 23–9

Adam Johnson  loses to Andrew Godwin by 27–9, loses to Simon Charette by 19–18

Thomas Forbes  loses to Andrew Godwin by 30–4, loses to Adam Johnson by 25–5]]></summary>
        <author>
            <name>Chaim Kirby</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The 2021 Python Language Summit: Welcome, Introductions, Guidelines]]></title>
        <id>http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/d6dgSmSBl6M/the-2021-python-language-summit-welcome.html</id>
        <link href="http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/d6dgSmSBl6M/the-2021-python-language-summit-welcome.html"/>
        <updated>2021-05-14T01:05:00.001Z</updated>
        <summary type="html"><![CDATA[As attendees slowly filtered into the virtual event leading up to the official start time, they were clearly happy to see each other and have the chance to get together virtually even though PyCon US and the language summit have had to be remote for two years in a row. Although we would like to see each other in person again, one benefit of keeping the summit virtual this year was that more people were able to participate than usual.
Normally, the number of people attending would be small enough that there would be time for each person to take a moment to introduce themselves to the group. Since there were more participants than usual this year, Łukasz Langa walked us through a slide deck that had a page for each of the attendees. It was an international event, with participants attending from North America, South America, Europe, Africa, the Middle East, Asia, and Oceania.
After Łukasz finished the introductions, Ewa Jodlowska told us about the code of conduct and the procedures in place to help all participants feel welcome and have a positive experience.
With the 2021 Python Language Summit off to a good start, we took a group photo and were ready to launch into the talks!]]></summary>
        <author>
            <name>Python Software Foundation News</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The 2021 Python Language Summit]]></title>
        <id>http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/_-8J6H4Mr-o/the-2021-python-language-summit.html</id>
        <link href="http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/_-8J6H4Mr-o/the-2021-python-language-summit.html"/>
        <updated>2021-05-13T20:27:00.012Z</updated>
        <summary type="html"><![CDATA[Every year, a small group of core developers from Python implementations such as CPython, PyPy, Jython, and more come together to share information, discuss problems, and seek consensus in order to help Python continue to flourish.


The Python Language Summit features short presentations followed by group discussions. The topics can relate to the language itself, the standard library, 
the development process, documentation, packaging, and more! In 2021, the summit was held over two days by videoconference and was led by Mariatta Wijaya and Łukasz 
Langa.

If you weren't able to attend the summit, then you can still stay up to date with what's happening in the world of Python by reading blog posts about all of the talks that were given. Over the next few weeks, you'll be able to 
dive into all of the news from the summit so you can join in 
on the big conversations that are happening in the Python community.


Day 1 

 
Welcome, Introductions, Guidelines 
Łukasz 
Langa 

 
PEP 654 — Exception Groups and except* 
Irit Katriel, Yury Selivanov, and Guido van Rossum 

 
Progress on Running Multiple Python Interpreters in Parallel in the Same Process 
Victor Stinner and Dong-hee Na
 
CPython Improvements at Instagram 
Dino Viehland
 
Making CPython Faster 
Guido van Rossum
 
HPy — Present and Future 
Antonio Cuni
 
Lightning Talks, Round 1 
Petr Viktorin, Lorena Mesa, Scott Shawcroft, and Jeff Allen
 


Day 2 


 

The Challenges of Packaging Python for a Linux Distro 
Matthias Klose
 
The Python Documentation Work Group 
Mariatta Wijaya and Carol Willing
 
What Is the stdlib? 
Brett Cannon
 
What Should I Work on as a Core Dev? 
Eric Snow
 
Fuzzing and Testing Python With Properties 
Zac Hatfield-Dodds

 
Lightning Talks, Round 2 
Ronny Pfannschmidt, Pablo Galindo, Batuhan Taskaya, Luciano Ramalho, Jason R. Coombs, Mark Shannon, and Tobias Kohn 
 

We hope you enjoy diving into what went on at the summit, and we're looking forward to seeing how the Python community continues these discussions.]]></summary>
        <author>
            <name>Python Software Foundation News</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django bugfix releases issued: 3.2.3, 3.1.11, and 2.2.23]]></title>
        <id>https://www.djangoproject.com/weblog/2021/may/13/bugfix-releases/</id>
        <link href="https://www.djangoproject.com/weblog/2021/may/13/bugfix-releases/"/>
        <updated>2021-05-13T07:30:54.000Z</updated>
        <summary type="html"><![CDATA[Today we've issued
3.2.3,
3.1.11, and
2.2.23  bugfix releases.
The release package and checksums are available from our downloads page, as well as from the Python Package Index. The PGP key ID used for this release is Mariusz Felisiak: 2EF56372BA48CD1B.]]></summary>
        <author>
            <name>Mariusz Felisiak</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Débora Azevedo: Finding A Sense of Belonging Through the Python Community]]></title>
        <id>http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/RswFJu_V2uE/debora-azevedo-finding-sense-of.html</id>
        <link href="http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/RswFJu_V2uE/debora-azevedo-finding-sense-of.html"/>
        <updated>2021-05-12T16:20:00.000Z</updated>
        <summary type="html"><![CDATA[PyLadies Brazil co-founder,  Débora Azevedo can encapsulate her feelings about the Python community in one word: Belonging.  

Growing up in Natal, Brazil, Débora never would’ve guessed that Python would come to play such an important role in her life. “When I was first learning about programming in high school, I found it really difficult to comprehend. At that time I wrote code in a notebook, because I didn’t own a computer.” 

Débora stumbled upon her love for programming accidentally when she was studying to be an English teacher. “I decided to pursue a computer networking course because I knew I didn’t want to code. There were four terms in the course and during the fourth term I had to learn programming,” she said.  “I was convinced it just wouldn’t work for me. But when I started to…]]></summary>
        <author>
            <name>Python Software Foundation News</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Ember Times - Issue No. 179]]></title>
        <id>https://blog.emberjs.com/the-ember-times-issue-179</id>
        <link href="https://blog.emberjs.com/the-ember-times-issue-179"/>
        <updated>2021-05-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[👋 Emberistas! 🐹
Global Accessibility Awareness Day, Readers' Question: Embroider status update, @use with Ember Apollo Client, and how JS frameworks solved the problem of rendering fast.
May 20th is Global Accessibility Awareness Day 💟
Global Accessibility Awareness Day, an awareness day focusing on digital access and inclusion for the more than one billion people with disabilities and impairments, will be celebrated on May 20, 2021. Here are some suggestions from Melanie Sumner (@MelSumner) on how you can get involved in some accessibility (a11y) related open source projects!
Help convert ember-component-patterns from Gitbook to an Ember app
Help with a11y-automation.dev which is a project to track a11y automation
Check out the help wanted page for issues in the ember-a11y GitHub organ…]]></summary>
        <author>
            <name>Ember.js Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django security releases issued: 3.2.2, 3.1.10, and 2.2.22]]></title>
        <id>https://www.djangoproject.com/weblog/2021/may/06/security-releases/</id>
        <link href="https://www.djangoproject.com/weblog/2021/may/06/security-releases/"/>
        <updated>2021-05-06T06:17:54.000Z</updated>
        <summary type="html"><![CDATA[In accordance with our security release policy, the Django team
is issuing
Django 3.2.2,
Django 3.1.10, and
Django 2.2.22.
These releases address the security issue with severity "moderate" detailed below. We encourage all users of Django to upgrade as soon as possible.
CVE-2021-32052: Header injection possibility since URLValidator accepted newlines in input on Python 3.9.5+
On Python 3.9.5+, URLValidator didn't prohibit
newlines and tabs. If you used values with newlines in HTTP response, you could
suffer from header injection attacks. Django itself wasn't vulnerable because
HttpResponse prohibits newlines in HTTP headers.
Moreover, the URLField form field which uses URLValidator silently
removes newlines and tabs on Python 3.9.5+, so the possibility of newlines
entering your data only existed if you are using this validator outside of the
form fields.
This issue was introduced by the bpo-43882 fix.
Affected supported versions
Django main branch
Django 3.2
Django 3.1
Django 2.2
Resolution
Patches to resolve the issue have been applied to Django's main branch and to
the 3.2, 3.1, and 2.2 release branches. The patches may be obtained from the
following changesets:
On the main branch
On the 3.2 release branch
On the 3.1 release branch
On the 2.2 release branch
The following releases have been issued:
Django 3.2.2 (download Django 3.2.2 | 3.2.2 checksums)
Django 3.1.10 (download Django 3.1.10 | 3.1.10 checksums)
Django 2.2.22 (download Django 2.2.22 | 2.2.22 checksums)
The PGP key ID used for this release is Mariusz Felisiak: 2EF56372BA48CD1B.
General notes regarding security reporting
As always, we ask that potential security issues be reported via
private email to security@djangoproject.com, and not via Django's
Trac instance or the django-developers list. Please see our security
policies for further
information.]]></summary>
        <author>
            <name>Mariusz Felisiak</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyCharm &amp; DSF Campaign 2021 Results]]></title>
        <id>https://www.djangoproject.com/weblog/2021/may/04/pycharm-dsf-campaign-2021-results/</id>
        <link href="https://www.djangoproject.com/weblog/2021/may/04/pycharm-dsf-campaign-2021-results/"/>
        <updated>2021-05-04T16:25:25.000Z</updated>
        <summary type="html"><![CDATA[The fifth annual JetBrains PyCharm promotion in April netted the Django Software Foundation $45,000 this year, a slight increase over the $40,000 raised last year.
This amount represents roughly 20% of the DSF's overall budget, which goes directly into funding the continued development and support of Django via the Django Fellowship program and Django conferences worldwide.
Django Software Foundation
The Django Software Foundation is the non-profit foundation that supports the development of the Django Web framework. It funds the Django Fellowship program, which currently supports two Fellows who triage tickets, review/merge patches from the community, and work on infrastructure. The introduction of this program starting in 2015 has gone a long way towards ensuring a consistent major release cycle and the fixing/blocking of severe bugs. DSF also funds development sprints, community events like DjangoCons, and related conferences and workshops globally.
Fundraising is still ongoing and you can donate directly at djangoproject.com/fundraising.]]></summary>
        <author>
            <name>William Vincent</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django security releases issued: 3.2.1, 3.1.9, and 2.2.21]]></title>
        <id>https://www.djangoproject.com/weblog/2021/may/04/security-releases/</id>
        <link href="https://www.djangoproject.com/weblog/2021/may/04/security-releases/"/>
        <updated>2021-05-04T08:51:35.000Z</updated>
        <summary type="html"><![CDATA[In accordance with our security release policy, the Django team
is issuing
Django 3.2.1,
Django 3.1.9, and
Django 2.2.21.
These release addresses the security issue detailed below. We encourage all users of Django to upgrade as soon as possible.
CVE-2021-31542: Potential directory-traversal via uploaded files
MultiPartParser, UploadedFile, and FieldFile allowed
directory-traversal via uploaded files with suitably crafted file names.
In order to mitigate this risk, stricter basename and path sanitation is now
applied.
This issue has low severity, according to the Django security policy.
Thank you to Jasu Viding for the report.
Affected supported versions
Django main branch
Django 3.2
Django 3.1
Django 2.2
Resolution
Patches to resolve the issue have been applied to Django's main branch and to
the 3.2, 3.1, and 2.2 release branches. The patches may be obtained from the
following changesets:
On the main branch
On the 3.2 release branch
On the 3.1 release branch
On the 2.2 release branch
The following releases have been issued:
Django 3.2.1 (download Django 3.2.1 | 3.2.1 checksums)
Django 3.1.9 (download Django 3.1.9 | 3.1.9 checksums)
Django 2.2.21 (download Django 2.2.21 | 2.2.21 checksums)
The PGP key ID used for these releases is Carlton Gibson: E17DF5C82B4F9D00.
General notes regarding security reporting
As always, we ask that potential security issues be reported via
private email to security@djangoproject.com, and not via Django's
Trac instance or the django-developers list. Please see our security
policies for further
information.]]></summary>
        <author>
            <name>Carlton Gibson</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcoming Microsoft as a Visionary Sponsor]]></title>
        <id>http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/GYSOS6MM_d0/welcoming-microsoft-as-visionary-sponsor.html</id>
        <link href="http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/GYSOS6MM_d0/welcoming-microsoft-as-visionary-sponsor.html"/>
        <updated>2021-04-29T16:20:00.007Z</updated>
        <summary type="html"><![CDATA[Microsoft helps millions of Python developers achieve more by enabling Python support across products and services like Windows, Visual Studio Code, GitHub, and Microsoft Azure.
Microsoft has been a long-time supporter of the Python Software Foundation, starting in 2006. Today, Microsoft employs several core developers working part-time on CPython and the Python Steering Council, making significant contributions as PEP authors. We are also excited that Guido van Rossum has recently joined Microsoft as a Distinguished Engineer and is exploring performance improvements to CPython.
Aside from helping advance the Python tooling and ecosystem, Microsoft has shown strong involvement with the Python community and has been a long-time sponsor of PyCon US, including four years at the top tier Keystone level. Microsoft’s support for the community extends to sponsorships of regional and international Python events including in emerging regions.
This year, we are excited that Microsoft is increasing their contributions to the PSF even further as a Visionary Sponsor. Microsoft’s sponsorship funds will be used to support the PSF with a focus on working with the Packaging Working Group on improving PyPI and the packaging ecosystem. 
You can read more about how Microsoft is supporting and contributing to the Python ecosystem on here.]]></summary>
        <author>
            <name>Python Software Foundation News</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Announcing six scientific Python grants]]></title>
        <id>http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/zGQQz8trs7c/announcing-six-scientific-python-grants.html</id>
        <link href="http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/zGQQz8trs7c/announcing-six-scientific-python-grants.html"/>
        <updated>2021-04-29T16:00:00.002Z</updated>
        <summary type="html"><![CDATA[The Scientific Python Working Group considers funding proposals that advance the scientific use of Python. In the past these have most often been workshops and conferences, but we also fund project improvements and outreach. Recently, we broadened our scope to include developer sprints.
Our most recent call for proposals has closed, and we are excited to announce six grants to:

Spyder for the development of online learning content for the Spyder IDE,
Nicolas McKibben to implement MRI reconstruction algorithms in PyGrappa,
The Carpentries to improve and maintain their Python curriculum,
Qu4nt for translating the scikit-learn documentation to Spanish,
Rosangela Mesquita for documenting common Continuous Integration practices for PyOceans, and
Blosc for the development of a Python wrapper for their new C-Blosc2 library.

We look forward to reporting back on these projects in a few months.


Written by the PSF Scientific Working Group]]></summary>
        <author>
            <name>Python Software Foundation News</name>
        </author>
    </entry>
</feed>